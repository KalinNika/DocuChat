import time
import requests

try:
    requests.get("http://host.docker.internal:11434").raise_for_status()
    print("‚úÖ Ollama –¥–æ—Å—Ç—É–ø–µ–Ω.")
except:
    raise Exception("‚ùå Ollama –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.")


wait_for_ollama()
from langchain_community.vectorstores import FAISS
from langchain_ollama.chat_models import ChatOllama
from langchain_ollama.embeddings import OllamaEmbeddings
from langchain.prompts import PromptTemplate
from langchain.chains import RetrievalQA
from bert_score import score

from sklearn.metrics.pairwise import cosine_similarity
from sentence_transformers import SentenceTransformer
import torch
import re

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ===
persist_dir = "vectorstore-chekhov"
model_name = "mistral"
threshold = 0.80

# === –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ ===
embeddings = OllamaEmbeddings(model=model_name, base_url="http://host.docker.internal:8080")
vectorstore = FAISS.load_local(persist_dir, embeddings, allow_dangerous_deserialization=True)
retriever = vectorstore.as_retriever(search_kwargs={"k": 10})
llm = ChatOllama(model=model_name, base_url="http://host.docker.internal:8080")


# === –ü—Ä–æ–º–ø—Ç ===
template = """
–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ **—Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ**, –∏—Å–ø–æ–ª—å–∑—É—è **—Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç**. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã.

üìé –ö–æ–Ω—Ç–µ–∫—Å—Ç:
{context}

‚ùì –í–æ–ø—Ä–æ—Å:
{question}

üßæ –û—Ç–≤–µ—Ç (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—Ç–∏):
"""

prompt = PromptTemplate(template=template, input_variables=["context", "question"])

qa_chain = RetrievalQA.from_chain_type(
    llm=llm,
    retriever=retriever,
    return_source_documents=True,
    chain_type="stuff",
    chain_type_kwargs={"prompt": prompt}
)

# === –¢–µ—Å—Ç—ã ===
tests = [
    {
        "question": "–ö—Ç–æ –±—ã–ª –∂–µ–Ω–∞—Ç –Ω–∞ –ö–∞—Ä–æ–ª–∏–Ω–µ –ö–∞—Ä–ª–æ–≤–Ω–µ?",
        "expected": "–ú–∞–π–æ—Ä –©–µ–ª–∫–æ–ª–æ–±–æ–≤ –±—ã–ª –∂–µ–Ω–∞—Ç –Ω–∞ –ö–∞—Ä–æ–ª–∏–Ω–µ –ö–∞—Ä–ª–æ–≤–Ω–µ."
    },
    {
        "question": "–ß—Ç–æ —Å–¥–µ–ª–∞–ª–∞ –º–∞–π–æ—Ä—à–∞ –≤ –ª–æ–¥–∫–µ, –∏–∑-–∑–∞ —á–µ–≥–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É–ª–∞—Å—å –ª–æ–¥–∫–∞?",
        "expected": "–õ–æ–¥–∫–∞ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É–ª–∞—Å—å, –∫–æ–≥–¥–∞ –º–∞–π–æ—Ä—à–∞ –≤—ã—Ä–≤–∞–ª–∞ –ø–ª–µ—Ç—å –∏–∑ —Ä—É–∫ –º–∞–π–æ—Ä–∞."
    },
    {
        "question": "–ö–µ–º —Ä–∞–±–æ—Ç–∞–ª –ò–≤–∞–Ω –ü–∞–≤–ª–æ–≤–∏—á –≤ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å–∫–∞–∑–∞?",
        "expected": "–ò–≤–∞–Ω –ü–∞–≤–ª–æ–≤–∏—á —Ä–∞–±–æ—Ç–∞–ª —É –º–∞–π–æ—Ä–∞ –≤ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –¥–≤–æ—Ä–Ω–∏–∫–∞."
    },
    {
        "question": "–ß—Ç–æ –ø–æ–æ–±–µ—â–∞–ª–∞ –º–∞–π–æ—Ä—à–∞ –ò–≤–∞–Ω—É –ü–∞–≤–ª–æ–≤–∏—á—É, –µ—Å–ª–∏ –æ–Ω –µ—ë —Å–ø–∞—Å—ë—Ç?",
        "expected": "–ú–∞–π–æ—Ä—à–∞ –ø–æ–æ–±–µ—â–∞–ª–∞ –ò–≤–∞–Ω—É –ü–∞–≤–ª–æ–≤–∏—á—É –≤—ã–π—Ç–∏ –∑–∞ –Ω–µ–≥–æ –∑–∞–º—É–∂, –µ—Å–ª–∏ –æ–Ω –µ—ë —Å–ø–∞—Å—ë—Ç."
    },
    {
        "question": "–ß–µ–º –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –∏—Å—Ç–æ—Ä–∏—è –ò–≤–∞–Ω–∞ –ü–∞–≤–ª–æ–≤–∏—á–∞ –ø–æ—Å–ª–µ —Å–ø–∞—Å–µ–Ω–∏—è –æ–±–æ–∏—Ö?",
        "expected": "–ü–æ—Å–ª–µ —Å–ø–∞—Å–µ–Ω–∏—è –ò–≤–∞–Ω –ü–∞–≤–ª–æ–≤–∏—á –ø—Ä–æ–¥–æ–ª–∂–∏–ª —Å–ª—É–∂–±—É –≤ –≤–æ–ª–æ—Å—Ç–Ω–æ–º –ø—Ä–∞–≤–ª–µ–Ω–∏–∏."
    }
]

# === –ú–µ—Ç—Ä–∏–∫–∞: BERTScore ===
def calc_similarity(answer: str, expected: str) -> float:
    P, R, F1 = score([answer], [expected], lang="ru", model_type="xlm-roberta-large")
    return F1.item()

# === –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ===
def normalize(text: str) -> str:
    return re.sub(r"[^\w\s]", "", text.lower()).strip()

# === –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ ===
def run_tests():
    success = 0
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤...")
    for i, test in enumerate(tests, 1):
        question = test["question"]
        expected = test["expected"]
        result = qa_chain.invoke({"query": question})
        answer = result["result"]
        similarity = calc_similarity(normalize(answer), normalize(expected))

        print(f"üß™ –¢–µ—Å—Ç {i}: {question}")
        print("üìÑ –û—Ç–≤–µ—Ç: ", answer)
        print("üìä –°—Ö–æ–¥—Å—Ç–≤–æ:", round(similarity, 2))

        if similarity >= threshold:
            print("‚úÖ –£–°–ü–ï–•")
            success += 1
        else:
            print("‚ùå –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï")
        print("-" * 80)

    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success} –∏–∑ {len(tests)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ.")

if __name__ == "__main__":
    run_tests()
